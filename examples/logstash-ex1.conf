input {
  file {
    path => [
    "/data/frontend.log"
    ]
    start_position => "beginning"
    sincedb_path => "/dev/null"
    tags => ["frontend"]
  }
}
filter {
  mutate { replace => { "producer" => "cmswebk8s" } }
  ruby { code => "event.set('logtime',(event.get('@timestamp').to_f * 1000).to_i)" }
  mutate {
      add_field => {
          "hostname" => "%{[agent][hostname]}"
          "agent_id" => "%{[agent][id]}"
          "ephemeral_id" => "%{[agent][ephemeral_id]}"
          "cmsweb_log" => "%{[log][file][path]}"
          "cmsweb_cluster" => "${CMSWEB_CLUSTER:NA}"
          "cmsweb_env" => "${CMSWEB_ENV:NA}"
    }
  }
  if "frontend" in [tags] {
      mutate { replace => { "type" => "frontend" } }
      grok {
        match => { "message" => '\[%{HTTPDATE:tstamp}\] %{DATA:frontend} %{IPORHOST:clientip} "%{WORD:method} %{NOTSPACE:request} %{DATA:httpversion}" %{NUMBER:code:int} \[data: %{NUMBER:bytes_sent:int} in %{NUMBER:bytes_received:int} out %{NUMBER:body_size:int} body %{NUMBER:time_spent_ms:int} us \] \[auth: %{DATA:tls} %{DATA:crypto} "%{DATA:dn}".*\] \[ref: "%{DATA}.*" "%{DATA:client}" \](?: %{NUMBER:fe_port}|)' }
      }
      grok {
        pattern_definitions => { "WORDHYPHEN" => "\b[\w\-]+\b" }
        match => { "request" => '/%{WORDHYPHEN:system}%{UNIXPATH:uri_path}%{URIPARAM:uri_params}?' }
      }
      if [uri_params] {
          grok { match => { "uri_path" => '/.*/%{DATA:api}$' } }
          if [api] == "" {
              grok { match => { "uri_path" => '/.*/%{DATA:api}/$' } }
          }
      } else {
          grok { match => { "request" => '/.*/%{DATA:api}$' } }
          if [api] == "" {
              grok { match => { "request" => '/.*/%{DATA:api}/$' } }
          }
      }
      if [uri_params] and ![api] {
          grok { match => { "uri_path" => '/.*/%{DATA:api}/$' } }
      }
      if ![api] {
          mutate { replace => { "api" => "%{request}" } }
          mutate { replace => { "system" => "%{request}" } }
      }
      date {
         match => [ "tstamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
         target => "date_object"
      }
      ruby {
         code => "event.set('rec_timestamp',event.get('date_object').to_i)
                  event.set('rec_date',event.get('date_object'))
                  event.set('timestamp',(event.get('rec_timestamp').to_f * 1000).to_i)
                 "
      }
      mutate { gsub =>  [ "dn","/CN=\d+","" ] }
  }

  if "acdcserver" in [tags] {
      mutate { replace => { "type" => "acdcserver" } }
  }
  if "confdb" in [tags] {
      mutate { replace => { "type" => "confdb" } }
  }
  if "couchdb" in [tags] {
      mutate { replace => { "type" => "couchdb" } }
      grok {
          match => { "message" => '\[%{GREEDYDATA:tstamp}\] \[%{WORD:log_level}\] \[<.*>\] %{IPORHOST:clientip} - - %{WORD:method} %{NOTSPACE:request} %{NUMBER:code:int}' }
      }
      grok { match => { "request" => '/%{WORD:system}%{UNIXPATH:uri_path}%{URIPARAM:uri_params}?' } }
      grok { match => { "uri_path" => '/.*/%{DATA:api}$' } }
      date {
         match => [ "tstamp", "EEE, dd MMM yyyy HH:mm:ss z" ]
         target => "date_object"
      }
      ruby {
         code => "event.set('rec_timestamp',event.get('date_object').to_i)
                  event.set('rec_date',event.get('date_object'))
                  event.set('timestamp',(event.get('rec_timestamp').to_f * 1000).to_i)
                 "
      }
      mutate { gsub =>  [ "dn","/CN=\d+","" ] }
  }
  if "crabserver" in [tags] {
      mutate { replace => { "type" => "crabserver" } }
  }
  if "crabcache" in [tags] {
      mutate { replace => { "type" => "crabcache" } }
  }
  if "dbs" in [tags] {
      mutate { replace => { "type" => "dbs" } }
      grok {
          match => { "message" => '.*\[%{NOTSPACE:tstamp}\] %{DATA:backend} %{IPORHOST:clientip} "%{WORD:method} %{NOTSPACE:request} %{DATA:httpversion}" %{NUMBER:code:int} %{WORD:status} \[data:.*\] \[auth: %{WORD:auth} "%{DATA:dn}" "%{DATA}.*" \] \[ref: "%{DATA}.*" "%{DATA:client_agent}" \]' }
      }
      grok { match => { "request" => '/dbs/%{WORD:instance}/%{WORD:instance_type}/%{WORD:instance_kind}/%{WORD:api}?%{DATA:params}' } }
      date {
         match => [ "tstamp", "dd/MMM/yyyy:HH:mm:ss" ]
         target => "date_object"
      }
      ruby {
         code => "event.set('rec_timestamp',event.get('date_object').to_i)
                  event.set('rec_date',event.get('date_object'))
                  event.set('timestamp',(event.get('rec_timestamp').to_f * 1000).to_i)
                 "
      }
      mutate { gsub =>  [ "dn","/CN=\d+","" ] }
  }
  if "das" in [tags] {
      mutate { replace => { "type" => "das" } }
  }
  if "dqmgui" in [tags] {
      mutate { replace => { "type" => "dqmgui" } }
  }
  if "phedex" in [tags] {
      mutate { replace => { "type" => "phedex" } }
  }
  if "reqmgr2" in [tags] {
      mutate { replace => { "type" => "reqmgr2" } }
      grok {
          match => { "message" => '.*\[%{NOTSPACE:tstamp}\] %{DATA:backend} %{IPORHOST:clientip} "%{WORD:method} %{NOTSPACE:request} %{DATA:httpversion}" %{NUMBER:code:int} %{WORD:status} \[data:.*\] \[auth: %{WORD:auth} "%{DATA:dn}" "%{DATA}.*" \] \[ref: "%{DATA}.*" "%{DATA:client_agent}" \]' }
      }
      date {
         match => [ "tstamp", "dd/MMM/yyyy:HH:mm:ss" ]
         target => "date_object"
      }
      mutate { gsub =>  [ "dn","/CN=\d+","" ] }
      mutate { replace => { "type" => "reqmgr2" } }
      ruby {
         code => "event.set('rec_timestamp',event.get('date_object').to_i)
                  event.set('rec_date',event.get('date_object'))
                  event.set('logtime',(event.get('@timestamp').to_f * 1000).to_i)
                  event.set('timestamp',(event.get('rec_timestamp').to_f * 1000).to_i)
                 "
      }
  }
  if "reqmgr2ms" in [tags] {
      mutate { replace => { "type" => "reqmgr2ms" } }
  }
  if "reqmgr2-tasks" in [tags] {
      mutate { replace => { "type" => "reqmgr2-tasks" } }
  }
  if "reqmon" in [tags] {
      mutate { replace => { "type" => "reqmon" } }
  }
  if "t0_reqmon" in [tags] {
      mutate { replace => { "type" => "t0_reqmon" } }
  }
  if "t0wmadatasvc" in [tags] {
      mutate { replace => { "type" => "t0wmadatasvc" } }
  }
  if "workqueue" in [tags] {
      mutate { replace => { "type" => "workqueue" } }
  }
  if "workqueue-tasks" in [tags] {
      mutate { replace => { "type" => "workqueue-tasks" } }
  }

  # common filters

  # drop failed records
  if "_grokparsefailure" in [tags] { drop { } }
  # remove quotes from message entry since it will break the JSON
  mutate { gsub => [ "message", "\n", "", "message", "\"", ""] }
  # last part we should remove object fields
  mutate { remove_field => ["agent", "log", "input", "tags", "ecs", "host"] }

}

# send results (JSON records) to local file
# Each records must have the following attributes:
# "producer":"%{producer}", "type": "%{type}"
# then we parse all filebeat attributes
# "hostname": "%{hostname}", "agent_id": "%{agent_id}", "ephemeral_id":
# "%{ephemeral_id}", "cmsweb_log": "%{cmsweb_log}",
# followed by log message itself
# "message": "%{message}"
output {
  if [type] == "frontend" {
      http {
          http_method => post
          url => "http://127.0.0.1:7777"
          content_type => "application/json; charset=UTF-8"
          format => "json_batch"
          # for message please use double quotes for string type and no-double
          # quotes for objects, e.g. %{agent} is an object, while "%{dn}" is a string
          message => '{"producer": "cmswebk8s", "type": "frontend", "hostname": "%{hostname}", "agent_id": "%{agent_id}", "ephemeral_id": "%{ephemeral_id}", "cmsweb_log": "%{cmsweb_log}", "message": "%{message}", "api": "%{api}", "client": "%{client}", "clientip": "%{clientip}", "code": %{code}, "crypto": "%{crypto}", "date_object": "%{date_object}", "dn": "%{dn}", "frontend": "%{frontend}", "httpversion": "%{httpversion}", "method": "%{method}", "rec_date": "%{rec_date}", "rec_timestamp": %{rec_timestamp}, "request": "%{request}", "system": "%{system}", "tls": "%{tls}", "tstamp": "%{tstamp}", "uri_params": "%{uri_params}", "uri_path": "%{uri_path}", "bytes_sent": "%{bytes_sent}", "bytes_received": "%{bytes_received}", "body_size": "%{body_size}", "time_spent_ms": "%{time_spent_ms}", "cmsweb_env":"%{cmsweb_env}", "cmsweb_cluster":"%{cmsweb_cluster}", "fe_port": "%{fe_port}", "timestamp": "%{timestamp}"}'
      }
  }
}
